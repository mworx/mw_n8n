#!/bin/bash
set -uo pipefail  # –£–±–∏—Ä–∞–µ–º -e —á—Ç–æ–±—ã –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ pipe
if [ ! -t 0 ]; then
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
    TEMP_SCRIPT=$(mktemp)
    cat > "$TEMP_SCRIPT"
    chmod +x "$TEMP_SCRIPT"
    exec bash "$TEMP_SCRIPT" "$@"
fi

# ============================================================================
# MEDIA WORKS - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Supabase + N8N + Traefik
# –í–µ—Ä—Å–∏—è: 3.0.0
# –ê–≤—Ç–æ—Ä: MEDIA WORKS DevOps Team
# –û–ø–∏—Å–∞–Ω–∏–µ: Production-ready —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
# ============================================================================

# ============================ –ö–û–ù–°–¢–ê–ù–¢–´ =====================================

readonly SCRIPT_VERSION="3.0.0"
readonly SCRIPT_NAME="$(basename "$0")"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly TIMESTAMP="$(date +%Y%m%d_%H%M%S)"
readonly LOG_FILE="/tmp/mediaworks_install_${TIMESTAMP}.log"

# –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ MEDIA WORKS
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly MAGENTA='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly GRAY='\033[0;90m'
readonly LIGHT_BLUE='\033[1;34m'
readonly LIGHT_GREEN='\033[1;32m'
readonly LIGHT_RED='\033[1;31m'
readonly PURPLE='\033[0;35m'
readonly ORANGE='\033[38;5;208m'
readonly PINK='\033[38;5;213m'
readonly NC='\033[0m' # –ë–µ–∑ —Ü–≤–µ—Ç–∞
readonly BOLD='\033[1m'
readonly DIM='\033[2m'
readonly UNDERLINE='\033[4m'
readonly BLINK='\033[5m'
readonly REVERSE='\033[7m'

# –≠–º–æ–¥–∑–∏ –∏ –∏–∫–æ–Ω–∫–∏
readonly CHECK_MARK="‚úì"
readonly CROSS_MARK="‚úó"
readonly ARROW="‚ûú"
readonly STAR="‚≠ê"
readonly ROCKET="üöÄ"
readonly PACKAGE="üì¶"
readonly LOCK="üîí"
readonly KEY="üîë"
readonly GEAR="‚öôÔ∏è"
readonly CLOUD="‚òÅÔ∏è"
readonly DATABASE="üóÑÔ∏è"
readonly GLOBE="üåç"
readonly FIRE="üî•"
readonly LIGHTNING="‚ö°"
readonly SPARKLES="‚ú®"

# –†–µ–∂–∏–º—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
readonly MODE_FULL="full"
readonly MODE_STANDARD="standard"
readonly MODE_RAG="rag"
readonly MODE_LIGHTWEIGHT="lightweight"

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
readonly DEFAULT_PROJECT_NAME="mediaworks_project"
readonly DEFAULT_DOMAIN="localhost"
readonly DEFAULT_EMAIL="admin@mediaworks.pro"
readonly JWT_EXPIRY_YEARS=20

# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Supabase
readonly SUPABASE_REPO="https://github.com/supabase/supabase.git"
readonly SUPABASE_VERSION="latest"

# ============================ ASCII –ê–†–¢ =====================================

show_media_works_logo() {
    clear
    cat << 'EOF'

    ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
    ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë    ‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
                                                                                            
EOF
    echo -e "${CYAN}    ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${WHITE}                          ENTERPRISE INFRASTRUCTURE AUTOMATION${NC}"
    echo -e "${GRAY}                                   Powered by DevOps Team${NC}"
    echo -e "${CYAN}    ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo ""
}

show_supabase_logo() {
    cat << 'EOF'

     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ï¶‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  
     ‚ïö‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ï¶‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

EOF
}

# ============================ –ê–ù–ò–ú–ê–¶–ò–ò =====================================

# –°–ø–∏–Ω–Ω–µ—Ä —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
show_spinner() {
    local pid=$1
    local message=${2:-"–û–±—Ä–∞–±–æ—Ç–∫–∞..."}
    local spinners=(
        "‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"
        "‚óê‚óì‚óë‚óí"
        "‚ó∞‚ó≥‚ó≤‚ó±"
        "‚ññ‚ñò‚ñù‚ñó"
        "‚ñ†‚ñ°‚ñ™‚ñ´"
        "‚ñå‚ñÄ‚ñê‚ñÑ"
        "‚†Å‚†Ç‚†Ñ‚°Ä‚¢Ä‚††‚†ê‚†à"
        "‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà‚ñá‚ñÜ‚ñÖ‚ñÑ‚ñÉ‚ñÇ‚ñÅ"
    )
    
    local spinner=${spinners[0]}
    local delay=0.1
    local i=0
    
    while kill -0 $pid 2>/dev/null; do
        printf "\r${CYAN}[${spinner:i:1}]${NC} ${message}"
        i=$(( (i+1) % ${#spinner} ))
        sleep $delay
    done
    
    printf "\r${GREEN}[${CHECK_MARK}]${NC} ${message} ${GREEN}–ì–æ—Ç–æ–≤–æ!${NC}\n"
}

# –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
show_progress() {
    local current=$1
    local total=$2
    local message=${3:-"–ü—Ä–æ–≥—Ä–µ—Å—Å"}
    local width=50
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    if [ $total -eq 0 ]; then
        return 0
    fi
    
    local percent=$((current * 100 / total))
    local filled=$((width * current / total))
    
    printf "\r${message}: ["
    printf "%${filled}s" | tr ' ' '‚ñà'
    printf "%$((width - filled))s" | tr ' ' '‚ñí'
    printf "] ${percent}%% "
    
    if [ $current -eq $total ]; then
        echo -e " ${GREEN}${CHECK_MARK} –ó–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
    fi
}

# –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
animate_text() {
    local text="$1"
    local delay=${2:-0.03}
    
    for (( i=0; i<${#text}; i++ )); do
        echo -n "${text:$i:1}"
        sleep $delay
    done
    echo ""
}

# ============================ –§–£–ù–ö–¶–ò–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ==========================

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $*" | tee -a "${LOG_FILE}"
}

error() {
    echo -e "\n${RED}${CROSS_MARK} –û–®–ò–ë–ö–ê:${NC} $*" | tee -a "${LOG_FILE}" >&2
    echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥-—Ñ–∞–π–ª: ${LOG_FILE}${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}‚ö† –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:${NC} $*" | tee -a "${LOG_FILE}"
}

info() {
    echo -e "${BLUE}‚Ñπ –ò–ù–§–û–†–ú–ê–¶–ò–Ø:${NC} $*" | tee -a "${LOG_FILE}"
}

success() {
    echo -e "${GREEN}${CHECK_MARK}${NC} $*" | tee -a "${LOG_FILE}"
}

# ============================ –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–í–ï–†–ö–ò ============================

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
check_system_requirements() {
    echo -e "\n${CYAN}${GEAR} –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...${NC}\n"
    
    local checks_passed=true
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–°
    echo -ne "  ${ARROW} –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: "
    if [[ -f /etc/os-release ]]; then
        source /etc/os-release
        if [[ "$ID" =~ ^(ubuntu|debian)$ ]]; then
            echo -e "${GREEN}${CHECK_MARK} $PRETTY_NAME${NC}"
        else
            echo -e "${RED}${CROSS_MARK} –¢—Ä–µ–±—É–µ—Ç—Å—è Ubuntu 20.04+ –∏–ª–∏ Debian 11+${NC}"
            checks_passed=false
        fi
    else
        echo -e "${RED}${CROSS_MARK} –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –û–°${NC}"
        checks_passed=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
    echo -ne "  ${ARROW} –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: "
    local cpu_cores=$(nproc)
    if [[ $cpu_cores -ge 2 ]]; then
        echo -e "${GREEN}${CHECK_MARK} $cpu_cores —è–¥–µ—Ä${NC}"
    else
        echo -e "${YELLOW}‚ö† $cpu_cores —è–¥–µ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 4+)${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ RAM
    echo -ne "  ${ARROW} –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: "
    local total_ram=$(free -m | awk '/^Mem:/{print $2}')
    local ram_gb=$((total_ram / 1024))
    if [[ $total_ram -ge 4096 ]]; then
        echo -e "${GREEN}${CHECK_MARK} ${ram_gb}GB${NC}"
    else
        echo -e "${YELLOW}‚ö† ${ram_gb}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 8GB+)${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
    echo -ne "  ${ARROW} –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: "
    local available_space=$(df / | awk 'NR==2 {print $4}')
    local space_gb=$((available_space / 1048576))
    if [[ $available_space -ge 10485760 ]]; then
        echo -e "${GREEN}${CHECK_MARK} ${space_gb}GB${NC}"
    else
        echo -e "${YELLOW}‚ö† ${space_gb}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 10GB+)${NC}"
    fi
    
    echo ""
    
    if [[ "$checks_passed" == false ]]; then
        error "–°–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"
    fi
    
    success "–í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!"
    sleep 2
}

# ============================ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô =======================

install_dependencies() {
    echo -e "\n${CYAN}${PACKAGE} –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}\n"
    
    # –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    local packages=(
        "curl"
        "wget"
        "git"
        "jq"
        "openssl"
        "ca-certificates"
        "gnupg"
        "lsb-release"
        "python3"
        "python3-pip"
        "apache2-utils"
        "software-properties-common"
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    {
        apt-get update -qq
    } &> /dev/null &
    
    local pid=$!
    show_spinner $pid "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–∞–∫–µ—Ç–æ–≤"
    wait $pid
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
    local total=${#packages[@]}
    local current=0
    
    for package in "${packages[@]}"; do
        current=$((current + 1))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞–∫–µ—Ç
        if dpkg -l | grep -q "^ii  $package"; then
            show_progress $current $total "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
        else
            {
                apt-get install -y -qq "$package"
            } &> /dev/null &
            
            local install_pid=$!
            wait $install_pid
            show_progress $current $total "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
        fi
    done
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤
    echo -e "\n  ${ARROW} –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –º–æ–¥—É–ª–µ–π..."
    {
        pip3 install -q pyjwt cryptography
    } &> /dev/null &
    
    local pip_pid=$!
    show_spinner $pip_pid "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT"
    wait $pip_pid
    
    echo ""
    success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
    sleep 1
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
install_docker() {
    echo -e "\n${CYAN}${PACKAGE} –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker...${NC}\n"
    
    if command -v docker &> /dev/null; then
        local docker_version=$(docker --version | cut -d' ' -f3 | tr -d ',')
        success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è $docker_version)"
        docker --version
    else
        info "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É..."
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
        {
            apt-get remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
        } &> /dev/null &
        
        show_spinner $! "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Docker"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ GPG –∫–ª—é—á–∞
        echo -e "  ${ARROW} –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Docker GPG –∫–ª—é—á–∞..."
        mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        echo -e "  ${ARROW} –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Docker —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
        echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
        {
            apt-get update -qq
            apt-get install -y -qq docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        } &> /dev/null &
        
        show_spinner $! "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Engine –∏ Docker Compose"
        
        # –ó–∞–ø—É—Å–∫ Docker
        systemctl start docker
        systemctl enable docker
        
        success "Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        docker --version
        docker compose version
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! docker compose version &> /dev/null; then
        error "Docker Compose –ø–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é."
    fi
    
    echo ""
}

# ============================ –í–´–ë–û–† –†–ï–ñ–ò–ú–ê –£–°–¢–ê–ù–û–í–ö–ò =======================

select_installation_mode() {
    exec < /dev/tty  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–≤–æ–¥ –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª    
    # clear
    # show_media_works_logo
    
    echo -e "\n${CYAN}${ROCKET} –í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú –£–°–¢–ê–ù–û–í–ö–ò${NC}\n"
    echo -e "${WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\n"
    
    echo -e "${GREEN}  [1]${NC} ${BOLD}–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô${NC} ${GRAY}(Full Stack)${NC}"
    echo -e "      ${SPARKLES} –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
    echo -e "      ${CHECK_MARK} Supabase (–≤—Å–µ –º–æ–¥—É–ª–∏: Edge Functions, Realtime, Storage, Vector)"
    echo -e "      ${CHECK_MARK} N8N Main + N8N Worker —Å –æ—á–µ—Ä–µ–¥—è–º–∏"
    echo -e "      ${CHECK_MARK} PostgreSQL + Redis –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo -e "      ${CHECK_MARK} Traefik —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º SSL"
    echo ""
    
    echo -e "${BLUE}  [2]${NC} ${BOLD}–°–¢–ê–ù–î–ê–†–¢–ù–´–ô${NC} ${GRAY}(Standard)${NC}"
    echo -e "      ${STAR} –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞"
    echo -e "      ${CHECK_MARK} Supabase (–≤—Å–µ –º–æ–¥—É–ª–∏)"
    echo -e "      ${CHECK_MARK} N8N (single instance)"
    echo -e "      ${CHECK_MARK} Traefik —Å SSL"
    echo ""
    
    echo -e "${MAGENTA}  [3]${NC} ${BOLD}RAG-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô${NC} ${GRAY}(RAG Version)${NC}"
    echo -e "      ${LIGHTNING} –î–ª—è AI –∏ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"
    echo -e "      ${CHECK_MARK} Supabase –¥–ª—è RAG (Vector, Studio, Auth, REST, Meta)"
    echo -e "      ${CHECK_MARK} N8N –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤"
    echo -e "      ${CHECK_MARK} –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"
    echo ""
    
    echo -e "${YELLOW}  [4]${NC} ${BOLD}–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô${NC} ${GRAY}(Lightweight)${NC}"
    echo -e "      ${GEAR} –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
    echo -e "      ${CHECK_MARK} N8N + PostgreSQL"
    echo -e "      ${CHECK_MARK} Traefik —Å SSL"
    echo -e "      ${CROSS_MARK} –ë–µ–∑ Supabase"
    echo ""
    
    echo -e "${WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    
    local mode_choice
    while true; do
        echo -ne "\n${CYAN}${ARROW}${NC} –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ ${WHITE}[1-4]${NC}: "
        read -r mode_choice
        
        case "$mode_choice" in
            1) INSTALLATION_MODE="$MODE_FULL"; break ;;
            2) INSTALLATION_MODE="$MODE_STANDARD"; break ;;
            3) INSTALLATION_MODE="$MODE_RAG"; break ;;
            4) INSTALLATION_MODE="$MODE_LIGHTWEIGHT"; break ;;
            *) echo -e "${RED}${CROSS_MARK}${NC} –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä." ;;
        esac
    done
}

# ============================ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–ê =========================

get_project_config() {
    
    echo -e "\n${CYAN}${GEAR} –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–ê${NC}\n"
    echo -e "${WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\n"
    
    local project_name
    local domain
    local email
    local use_ssl
    
    # –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
    while true; do
        echo -ne "${ARROW} –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ${GRAY}[${DEFAULT_PROJECT_NAME}]${NC}: "
        read -r project_name
        project_name=${project_name:-$DEFAULT_PROJECT_NAME}
        
        if [[ "$project_name" =~ ^[a-z0-9_]+$ ]]; then
            echo -e "${GREEN}${CHECK_MARK}${NC} –ü—Ä–æ–µ–∫—Ç: ${WHITE}$project_name${NC}"
            break
        else
            echo -e "${RED}${CROSS_MARK}${NC} –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è"
        fi
    done
    
    echo ""
    
    # –î–æ–º–µ–Ω
    while true; do
        echo -ne "${ARROW} –î–æ–º–µ–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${GRAY}[${DEFAULT_DOMAIN}]${NC}: "
        read -r domain
        domain=${domain:-$DEFAULT_DOMAIN}
        
        if validate_domain "$domain"; then
            echo -e "${GREEN}${CHECK_MARK}${NC} –î–æ–º–µ–Ω: ${WHITE}$domain${NC}"
            break
        else
            echo -e "${RED}${CROSS_MARK}${NC} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞"
        fi
    done
    
    echo ""
    
    # Email –¥–ª—è SSL
    if [[ "$domain" != "localhost" ]]; then
        echo -ne "${ARROW} Email –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ${GRAY}[${DEFAULT_EMAIL}]${NC}: "
        read -r email
        email=${email:-$DEFAULT_EMAIL}
        echo -e "${GREEN}${CHECK_MARK}${NC} Email: ${WHITE}$email${NC}"
        use_ssl="true"
    else
        email=$DEFAULT_EMAIL
        use_ssl="false"
        info "–î–ª—è localhost SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    fi
    
    echo ""
    echo -e "${GREEN}${CHECK_MARK} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!${NC}"
    sleep 2
    
    PROJECT_NAME="$project_name"
    DOMAIN="$domain"
    EMAIL="$email"
    USE_SSL="$use_ssl"
}

# ============================ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–ê–†–û–õ–ï–ô ============================

generate_password() {
    local length=${1:-32}
    tr -dc 'a-zA-Z0-9' < /dev/urandom | head -c "$length"
}

generate_jwt_secret() {
    generate_password 64
}

generate_jwt_tokens() {
    local jwt_secret=$1
    local anon_key=""
    local service_key=""
    
    info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–æ–≤ —Å ${JWT_EXPIRY_YEARS}-–ª–µ—Ç–Ω–∏–º —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è..."
    
    cat > /tmp/generate_jwt.py << 'EOF'
import jwt
import datetime
import sys

def generate_jwt_token(secret, role, expiry_years=20):
    now = datetime.datetime.now(datetime.timezone.utc)
    iat = int(now.timestamp())
    exp = int((now + datetime.timedelta(days=365 * expiry_years)).timestamp())
    
    payload = {
        "role": role,
        "iss": "supabase",
        "iat": iat,
        "exp": exp
    }
    
    if role == "anon":
        payload["aud"] = "authenticated"
    elif role == "service_role":
        payload["aud"] = "authenticated"
    
    token = jwt.encode(payload, secret, algorithm='HS256')
    return token

if __name__ == "__main__":
    secret = sys.argv[1]
    role = sys.argv[2]
    expiry_years = int(sys.argv[3]) if len(sys.argv) > 3 else 20
    
    token = generate_jwt_token(secret, role, expiry_years)
    print(token)
EOF
    
    anon_key=$(python3 /tmp/generate_jwt.py "$jwt_secret" "anon" "$JWT_EXPIRY_YEARS")
    service_key=$(python3 /tmp/generate_jwt.py "$jwt_secret" "service_role" "$JWT_EXPIRY_YEARS")
    
    rm -f /tmp/generate_jwt.py
    
    echo "$anon_key|$service_key"
}

# ============================ –í–ê–õ–ò–î–ê–¶–ò–Ø =====================================

validate_domain() {
    local domain=$1
    if [[ ! "$domain" =~ ^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?(\.[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?)*$ ]]; then
        return 1
    fi
    return 0
}

escape_password() {
    local password=$1
    printf '%s\n' "$password" | sed -e 's/[[\.*^$()+?{|]/\\&/g'
}

# ============================ –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–ï SUPABASE ========================

clone_supabase() {
    local target_dir=$1
    
    echo -e "\n${CYAN}${PACKAGE} –ó–∞–≥—Ä—É–∑–∫–∞ Supabase...${NC}\n"
    
    if [[ -d "$target_dir/supabase" ]]; then
        info "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Supabase —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª—è—é..."
        cd "$target_dir/supabase"
        git pull origin main &> /dev/null &
        show_spinner $! "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Supabase —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    else
        git clone --depth 1 "$SUPABASE_REPO" "$target_dir/supabase" &> /dev/null &
        show_spinner $! "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Supabase —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    fi
    
    success "Supabase —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥–æ—Ç–æ–≤!"
}

# ============================ –°–û–ó–î–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ ===========================

create_project_structure() {
    local project_dir=$1
    
    echo -e "\n${CYAN}${PACKAGE} –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...${NC}\n"
    
    mkdir -p "$project_dir"/{configs,volumes,scripts,backups}
    mkdir -p "$project_dir"/configs/{traefik/dynamic,supabase}
    mkdir -p "$project_dir"/volumes/{traefik/logs,postgres,n8n,supabase,redis,db/data,storage,functions}
    
    # –°–æ–∑–¥–∞–µ–º acme.json —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
    touch "$project_dir"/volumes/traefik/acme.json
    chmod 600 "$project_dir"/volumes/traefik/acme.json
    
    success "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ $project_dir"
}

# ============================ –ì–ï–ù–ï–†–ê–¶–ò–Ø –£–ß–ï–¢–ù–´–• –î–ê–ù–ù–´–• ====================

generate_credentials() {
    echo -e "\n${CYAN}${KEY} –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...${NC}\n"
    
    local jwt_secret=$(generate_jwt_secret)
    local jwt_tokens=$(generate_jwt_tokens "$jwt_secret")
    local anon_key=$(echo "$jwt_tokens" | cut -d'|' -f1)
    local service_key=$(echo "$jwt_tokens" | cut -d'|' -f2)
    
    show_progress 1 5 "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π"
    sleep 0.5
    show_progress 2 5 "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π"
    sleep 0.5
    show_progress 3 5 "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π"
    sleep 0.5
    show_progress 4 5 "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π"
    sleep 0.5
    show_progress 5 5 "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π"
    
    cat << EOF
JWT_SECRET=$jwt_secret
ANON_KEY=$anon_key
SERVICE_ROLE_KEY=$service_key
POSTGRES_PASSWORD=$(generate_password 32)
DASHBOARD_USERNAME=admin
DASHBOARD_PASSWORD=$(generate_password 24)
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=$(generate_password 24)
REDIS_PASSWORD=$(generate_password 32)
SECRET_KEY_BASE=$(generate_password 64)
VAULT_ENC_KEY=$(generate_password 32)
LOGFLARE_PUBLIC_ACCESS_TOKEN=$(generate_password 32)
LOGFLARE_PRIVATE_ACCESS_TOKEN=$(generate_password 32)
EOF
}

# ============================ –°–û–ó–î–ê–ù–ò–ï .env –§–ê–ô–õ–ê ==========================

create_env_file() {
    local project_dir=$1
    local mode=$2
    local domain=$3
    local email=$4
    local use_ssl=$5
    local credentials=$6
    
    info "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ .env..."
    
    cat > "$project_dir/.env" << EOF
# ============================================================================
# MEDIA WORKS - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: $(date)
# ============================================================================

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_NAME=$(basename "$project_dir")
INSTALLATION_MODE=$mode
DOMAIN=$domain
EMAIL=$email
USE_SSL=$use_ssl
INSTALL_TIMESTAMP=$TIMESTAMP

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
POSTGRES_HOST=db
POSTGRES_PORT=5432
POSTGRES_DB=postgres
POSTGRES_PASSWORD=$(echo "$credentials" | grep "POSTGRES_PASSWORD" | cut -d'=' -f2)

# JWT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 20 –ª–µ—Ç)
JWT_SECRET=$(echo "$credentials" | grep "JWT_SECRET" | cut -d'=' -f2)
JWT_EXPIRY=315360000
ANON_KEY=$(echo "$credentials" | grep "ANON_KEY" | cut -d'=' -f2)
SERVICE_ROLE_KEY=$(echo "$credentials" | grep "SERVICE_ROLE_KEY" | cut -d'=' -f2)

# –î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
DASHBOARD_USERNAME=$(echo "$credentials" | grep "DASHBOARD_USERNAME" | cut -d'=' -f2)
DASHBOARD_PASSWORD=$(echo "$credentials" | grep "DASHBOARD_PASSWORD" | cut -d'=' -f2)

# N8N –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
N8N_BASIC_AUTH_USER=$(echo "$credentials" | grep "N8N_BASIC_AUTH_USER" | cut -d'=' -f2)
N8N_BASIC_AUTH_PASSWORD=$(echo "$credentials" | grep "N8N_BASIC_AUTH_PASSWORD" | cut -d'=' -f2)

# Redis (–¥–ª—è —Ä–µ–∂–∏–º–∞ Full)
REDIS_PASSWORD=$(echo "$credentials" | grep "REDIS_PASSWORD" | cut -d'=' -f2)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã Supabase
SECRET_KEY_BASE=$(echo "$credentials" | grep "SECRET_KEY_BASE" | cut -d'=' -f2)
VAULT_ENC_KEY=$(echo "$credentials" | grep "VAULT_ENC_KEY" | cut -d'=' -f2)
LOGFLARE_PUBLIC_ACCESS_TOKEN=$(echo "$credentials" | grep "LOGFLARE_PUBLIC_ACCESS_TOKEN" | cut -d'=' -f2)
LOGFLARE_PRIVATE_ACCESS_TOKEN=$(echo "$credentials" | grep "LOGFLARE_PRIVATE_ACCESS_TOKEN" | cut -d'=' -f2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Studio
STUDIO_DEFAULT_ORGANIZATION=MEDIA WORKS
STUDIO_DEFAULT_PROJECT=Production

# Email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
ENABLE_EMAIL_SIGNUP=false
ENABLE_EMAIL_AUTOCONFIRM=false
SMTP_ADMIN_EMAIL=$email
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=
SMTP_PASS=
SMTP_SENDER_NAME=MEDIA WORKS

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–æ—Ç–∫–ª—é—á–µ–Ω–∞)
ENABLE_PHONE_SIGNUP=false
ENABLE_PHONE_AUTOCONFIRM=false

# –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
ENABLE_ANONYMOUS_USERS=false
DISABLE_SIGNUP=false

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
STORAGE_BACKEND=file
IMGPROXY_ENABLE_WEBP_DETECTION=true

# –§—É–Ω–∫—Ü–∏–∏
FUNCTIONS_VERIFY_JWT=false

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
POOLER_TENANT_ID=pooler
POOLER_DEFAULT_POOL_SIZE=20
POOLER_MAX_CLIENT_CONN=100
POOLER_DB_POOL_SIZE=20
POOLER_PROXY_PORT_TRANSACTION=6543

# –ü–æ—Ä—Ç—ã Kong
KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443

# Docker
DOCKER_SOCKET_LOCATION=/var/run/docker.sock

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
ADDITIONAL_REDIRECT_URLS=
MAILER_URLPATHS_INVITE=/auth/v1/verify
MAILER_URLPATHS_CONFIRMATION=/auth/v1/verify
MAILER_URLPATHS_RECOVERY=/auth/v1/verify
MAILER_URLPATHS_EMAIL_CHANGE=/auth/v1/verify
EOF
    
    # –û—á–∏—Å—Ç–∫–∞ .env —Ñ–∞–π–ª–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    sed -i 's/[[:space:]]*$//' "$project_dir/.env"
    sed -i 's/\r$//' "$project_dir/.env"
    
    success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω"
}

# ============================ –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í ==============================

start_services_with_progress() {
    set +e  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    local project_dir=$1
    local mode=$2
    
    echo -e "\n${CYAN}${ROCKET} –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}\n"
    echo -e "${YELLOW}${LIGHTNING} –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 20 –º–∏–Ω—É—Ç!${NC}"
    echo -e "${GRAY}–≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...${NC}\n"
    
    cd "$project_dir"
    
    # –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω—é—é —Å–µ—Ç—å –¥–ª—è Traefik
    docker network create traefik_network 2>/dev/null || true
    
    # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    local services=()
    
    case "$mode" in
        "$MODE_FULL")
            services=("db" "vector" "analytics" "kong" "auth" "rest" "meta" "studio" "realtime" "storage" "imgproxy" "functions" "supavisor" "redis" "n8n-main" "n8n-worker" "traefik")
            ;;
        "$MODE_STANDARD")
            services=("db" "vector" "analytics" "kong" "auth" "rest" "meta" "studio" "realtime" "storage" "imgproxy" "functions" "supavisor" "n8n" "traefik")
            ;;
        "$MODE_RAG")
            services=("db" "vector" "kong" "auth" "rest" "meta" "studio" "supavisor" "n8n" "traefik")
            ;;
        "$MODE_LIGHTWEIGHT")
            services=("postgres" "n8n" "traefik")
            ;;
    esac
    
    local total=${#services[@]}
    local current=0
    
    for service in "${services[@]}"; do
        current=$((current + 1))
 #       echo -e "\n  ${ARROW} –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞: ${WHITE}$service${NC}"
        
        {
            docker compose up -d "$service" 2>&1 | tee -a "${LOG_FILE}"
        } &> /dev/null &
        
        local service_pid=$!
        show_spinner $service_pid "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∑–∞–ø—É—Å–∫ $service"
        wait $service_pid || true
        
 #       show_progress $current $total "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
        sleep 1
    done
    
    echo ""
    success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!"
    set -e  # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
}

# ============================ –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø ============================

health_check_with_animation() {
    local mode=$1
    
    echo -e "\n${CYAN}${GEAR} –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}\n"
    sleep 5
    
    local services_to_check=()
    local failed_services=()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    case "$mode" in
        "$MODE_FULL")
            services_to_check=("PostgreSQL:supabase-db:pg_isready -U postgres" 
                              "Redis:redis:redis-cli ping"
                              "Kong API:localhost:8000:/health"
                              "N8N:localhost:5678:/healthz"
                              "Traefik:localhost:8080:/ping")
            ;;
        "$MODE_STANDARD"|"$MODE_RAG")
            services_to_check=("PostgreSQL:supabase-db:pg_isready -U postgres"
                              "Kong API:localhost:8000:/health"
                              "N8N:localhost:5678:/healthz"
                              "Traefik:localhost:8080:/ping")
            ;;
        "$MODE_LIGHTWEIGHT")
            services_to_check=("PostgreSQL:postgres:pg_isready -U postgres"
                              "N8N:localhost:5678:/healthz"
                              "Traefik:localhost:8080:/ping")
            ;;
    esac
    
    for check in "${services_to_check[@]}"; do
        IFS=':' read -r name container command <<< "$check"
        echo -ne "  ${ARROW} –ü—Ä–æ–≤–µ—Ä–∫–∞ ${name}... "
        
        if [[ "$command" == /* ]]; then
            # HTTP –ø—Ä–æ–≤–µ—Ä–∫–∞
            if curl -sf "http://$container$command" &>/dev/null; then
                echo -e "${GREEN}${CHECK_MARK} –†–∞–±–æ—Ç–∞–µ—Ç${NC}"
            else
                echo -e "${RED}${CROSS_MARK} –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
                failed_services+=("$name")
            fi
        else
            # Docker exec –ø—Ä–æ–≤–µ—Ä–∫–∞
            if docker exec "$container" $command &>/dev/null; then
                echo -e "${GREEN}${CHECK_MARK} –†–∞–±–æ—Ç–∞–µ—Ç${NC}"
            else
                echo -e "${RED}${CROSS_MARK} –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
                failed_services+=("$name")
            fi
        fi
        
        sleep 0.5
    done
    
    echo ""
    
    if [ ${#failed_services[@]} -gt 0 ]; then
        warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: ${failed_services[*]}"
        echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs${NC}"
    else
        success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    fi
}

# ============================ –°–û–ó–î–ê–ù–ò–ï –°–ö–†–ò–ü–¢–û–í –£–ü–†–ê–í–õ–ï–ù–ò–Ø =================

create_management_scripts() {
    local project_dir=$1
    
    info "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
    
    # manage.sh
    cat > "$project_dir/scripts/manage.sh" << 'EOF'
#!/bin/bash
# MEDIA WORKS - –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

cd "$PROJECT_DIR"

case "$1" in
    start)
        echo "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose up -d
        ;;
    stop)
        echo "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose stop
        ;;
    restart)
        echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose restart
        ;;
    status)
        echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
        docker compose ps
        ;;
    logs)
        shift
        echo "üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤..."
        docker compose logs -f "$@"
        ;;
    update)
        echo "‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose pull
        docker compose up -d
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|status|logs|update}"
        exit 1
        ;;
esac
EOF
    
    # backup.sh
    cat > "$project_dir/scripts/backup.sh" << 'EOF'
#!/bin/bash
# MEDIA WORKS - –°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
BACKUP_DIR="$PROJECT_DIR/backups/$(date +%Y%m%d_%H%M%S)"

mkdir -p "$BACKUP_DIR"
cd "$PROJECT_DIR"

echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ $BACKUP_DIR..."

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL
echo "  ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
docker exec supabase-db pg_dumpall -U postgres > "$BACKUP_DIR/postgres_backup.sql"

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–º–æ–≤
echo "  ‚Ä¢ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–º–æ–≤..."
tar -czf "$BACKUP_DIR/volumes.tar.gz" volumes/

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo "  ‚Ä¢ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cp .env "$BACKUP_DIR/"
cp docker-compose.yml "$BACKUP_DIR/"

echo "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: $BACKUP_DIR"
EOF
    
    chmod +x "$project_dir/scripts/"*.sh
    
    success "–°–∫—Ä–∏–ø—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã"
}

# ============================ –°–û–•–†–ê–ù–ï–ù–ò–ï –£–ß–ï–¢–ù–´–• –î–ê–ù–ù–´–• ===================

save_credentials() {
    local project_dir=$1
    local domain=$2
    local mode=$3
    
    info "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
    
    source "$project_dir/.env"
    
    cat > "$project_dir/credentials.txt" << EOF
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           MEDIA WORKS                                         ‚ïë
‚ïë                    –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –î–û–°–¢–£–ü–ê                                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $(date)
–†–µ–∂–∏–º: $mode
–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $project_dir
–î–æ–º–µ–Ω: $domain

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                              –î–û–°–¢–£–ü –ö –°–ï–†–í–ò–°–ê–ú
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

SUPABASE STUDIO:
----------------
URL: https://studio.$domain
Service Role Key: $SERVICE_ROLE_KEY
Anon Key: $ANON_KEY

N8N AUTOMATION:
---------------
URL: https://$domain
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $N8N_BASIC_AUTH_USER
–ü–∞—Ä–æ–ª—å: $N8N_BASIC_AUTH_PASSWORD

TRAEFIK DASHBOARD:
------------------
URL: https://traefik.$domain
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $DASHBOARD_USERNAME
–ü–∞—Ä–æ–ª—å: $DASHBOARD_PASSWORD

–ë–ê–ó–ê –î–ê–ù–ù–´–•:
------------
–•–æ—Å—Ç: localhost
–ü–æ—Ä—Ç: 5432
–ë–∞–∑–∞: postgres
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: postgres
–ü–∞—Ä–æ–ª—å: $POSTGRES_PASSWORD

–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
postgresql://postgres:$POSTGRES_PASSWORD@localhost:5432/postgres

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                                API ENDPOINTS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

API Gateway: https://api.$domain
REST API: https://api.$domain/rest/v1/
Auth API: https://api.$domain/auth/v1/
Realtime: wss://api.$domain/realtime/v1/
Storage: https://api.$domain/storage/v1/

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                              –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

–ó–∞–ø—É—Å–∫:            $project_dir/scripts/manage.sh start
–û—Å—Ç–∞–Ω–æ–≤–∫–∞:         $project_dir/scripts/manage.sh stop
–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:    $project_dir/scripts/manage.sh logs [—Å–µ—Ä–≤–∏—Å]
–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è:   $project_dir/scripts/backup.sh
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:        $project_dir/scripts/update.sh

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                              –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!
üîí –•—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
üîë JWT —Ç–æ–∫–µ–Ω—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–æ —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è 20 –ª–µ—Ç
üìù –í—Å–µ –ø–∞—Ä–æ–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (–±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)
üîê SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ Let's Encrypt

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: support@mediaworks.pro
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.mediaworks.pro

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                        ¬© 2024 MEDIA WORKS. All rights reserved.
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
EOF
    
    chmod 600 "$project_dir/credentials.txt"
    
    success "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $project_dir/credentials.txt"
}

# ============================ –§–ò–ù–ê–õ–¨–ù–´–ô –≠–ö–†–ê–ù ==============================

display_final_summary() {
    local project_dir=$1
    local domain=$2
    local mode=$3
    
    clear
    show_media_works_logo
    
    echo -e "\n${GREEN}${SPARKLES} –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û! ${SPARKLES}${NC}\n"
    
    cat << EOF

    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                      –°–í–û–î–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø                          ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

    ${CYAN}–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏:${NC}    $mode
    ${CYAN}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:${NC}         $project_dir
    ${CYAN}–î–æ–º–µ–Ω:${NC}              $domain

    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                         –¢–û–ß–ö–ò –î–û–°–¢–£–ü–ê                             ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

    ${GREEN}Supabase Studio:${NC}    https://studio.$domain
    ${GREEN}N8N Workflows:${NC}      https://$domain
    ${GREEN}Traefik Admin:${NC}      https://traefik.$domain

    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                      –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò                               ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

    1. ${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:${NC}
       cat $project_dir/credentials.txt

    2. ${YELLOW}–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}
       cd $project_dir && docker compose ps

    3. ${YELLOW}–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:${NC}
       cd $project_dir && docker compose logs -f

    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                     –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê                         ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

    ${CYAN}Email:${NC}     support@mediaworks.pro
    ${CYAN}Telegram:${NC}  @mediaworks_support
    ${CYAN}Docs:${NC}      https://docs.mediaworks.pro

EOF
    
    echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${WHITE}           –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ MEDIA WORKS!${NC}"
    echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\n"
}

# ============================ –°–û–ó–î–ê–ù–ò–ï DOCKER COMPOSE =======================

create_docker_compose_files() {
    local project_dir=$1
    local mode=$2
    local domain=$3
    
    info "–°–æ–∑–¥–∞–Ω–∏–µ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–π docker-compose.yml
    # –ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É, —Å–æ–∑–¥–∞—é —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    
    cat > "$project_dir/docker-compose.yml" << 'EOF'
version: '3.8'

# –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
x-common: &common
  restart: unless-stopped
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"
  networks:
    - supabase_network

networks:
  supabase_network:
    driver: bridge
  traefik_network:
    external: true

volumes:
  db-config:

services:
  # Traefik - —Ä–µ–≤–µ—Ä—Å-–ø—Ä–æ–∫—Å–∏
  traefik:
    <<: *common
    image: traefik:v3.0
    container_name: traefik
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - ./configs/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./configs/traefik/dynamic:/etc/traefik/dynamic:ro
      - ./volumes/traefik/acme.json:/letsencrypt/acme.json
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./volumes/traefik/logs:/var/log/traefik
    networks:
      - traefik_network
      - supabase_network

  # PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  db:
    <<: *common
    container_name: supabase-db
    image: supabase/postgres:15.8.1.060
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data:Z
      - db-config:/etc/postgresql-custom
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: ${POSTGRES_PORT}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXP: ${JWT_EXPIRY}

  # N8N - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è workflows
  n8n:
    <<: *common
    image: n8nio/n8n:latest
    container_name: n8n
    depends_on:
      db:
        condition: service_healthy
    environment:
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=${N8N_PORT}
      - N8N_PROTOCOL=${N8N_PROTOCOL}
      - NODE_ENV=production
      - WEBHOOK_URL=${WEBHOOK_URL}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_PORT=${POSTGRES_PORT}
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_SCHEMA=n8n
      - EXECUTIONS_MODE=regular
      - N8N_METRICS=true
    volumes:
      - ./volumes/n8n:/home/node/.n8n
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`${N8N_HOST}`)"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"

  # Kong API Gateway
  kong:
    <<: *common
    image: kong:2.8-alpine
    container_name: supabase-kong
    depends_on:
      db:
        condition: service_healthy
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
    volumes:
      - ./volumes/api/kong.yml:/var/lib/kong/kong.yml:ro

  # Supabase Studio
  studio:
    <<: *common
    image: supabase/studio:20231103-a58d427
    container_name: supabase-studio
    depends_on:
      kong:
        condition: service_started
    environment:
      STUDIO_PG_META_URL: http://meta:8080
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.studio.rule=Host(`studio.${DOMAIN}`)"
      - "traefik.http.routers.studio.tls=true"
      - "traefik.http.services.studio.loadbalancer.server.port=3000"
    EOF
    
    success "Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
}

# ============================ –°–û–ó–î–ê–ù–ò–ï TRAEFIK CONFIG =======================

create_traefik_configuration() {
    local project_dir=$1
    local domain=$2
    local email=$3
    local use_ssl=$4
    
    info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Traefik..."
    
    cat > "$project_dir/configs/traefik/traefik.yml" << EOF
# MEDIA WORKS - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Traefik

api:
  dashboard: true
  debug: false

entryPoints:
  web:
    address: ":80"
    http:
      redirections:
        entryPoint:
          to: websecure
          scheme: https
          permanent: true
  websecure:
    address: ":443"

providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false
    network: traefik_network
  file:
    directory: /etc/traefik/dynamic
    watch: true

certificatesResolvers:
  letsencrypt:
    acme:
      email: $email
      storage: /letsencrypt/acme.json
      httpChallenge:
        entryPoint: web

log:
  level: INFO
  filePath: /var/log/traefik/traefik.log

accessLog:
  filePath: /var/log/traefik/access.log
  bufferingSize: 100
EOF
    
    success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Traefik —Å–æ–∑–¥–∞–Ω–∞"
}

# ============================ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==============================

main() {
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø
    show_media_works_logo
    sleep 2
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_root
    check_system_requirements
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_dependencies
    install_docker
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    INSTALLATION_MODE=""  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    select_installation_mode
    local mode=$INSTALLATION_MODE
    PROJECT_NAME=""
    DOMAIN=""
    EMAIL=""
    USE_SSL=""
    get_project_config  # –ë–µ–∑ –∑–∞—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
    local project_name=$PROJECT_NAME
    local domain=$DOMAIN
    local email=$EMAIL
    local use_ssl=$USE_SSL
    
    local project_dir="/root/$project_name"
    
    # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Supabase
    if [ "$mode" != "$MODE_LIGHTWEIGHT" ]; then
        clone_supabase "/root"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    create_project_structure "$project_dir"
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    local credentials=$(generate_credentials)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    create_env_file "$project_dir" "$mode" "$domain" "$email" "$use_ssl" "$credentials"
    create_traefik_configuration "$project_dir" "$domain" "$email" "$use_ssl"
    create_docker_compose_files "$project_dir" "$mode" "$domain"
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    start_services_with_progress "$project_dir" "$mode"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    health_check_with_animation "$mode"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    create_management_scripts "$project_dir"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    save_credentials "$project_dir" "$domain" "$mode"
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
    display_final_summary "$project_dir" "$domain" "$mode"
}

# ============================ –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê ================================

main "$@"
