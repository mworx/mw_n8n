#!/bin/bash
set -uo pipefail

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ pipe. –ï—Å–ª–∏ –¥–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
# –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö `read` –∫–æ–º–∞–Ω–¥.
if [ ! -t 0 ]; then
    TEMP_SCRIPT=$(mktemp)
    cat > "$TEMP_SCRIPT"
    chmod +x "$TEMP_SCRIPT"
    exec bash "$TEMP_SCRIPT" "$@"
fi

# ============================================================================
# MEDIA WORKS - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Supabase + N8N + Traefik
# –í–µ—Ä—Å–∏—è: 4.0.0 (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
# –ê–≤—Ç–æ—Ä: MEDIA WORKS DevOps Team
# –û–ø–∏—Å–∞–Ω–∏–µ: Production-ready —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Å 4 —Ä–µ–∂–∏–º–∞–º–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
#           –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.
# ============================================================================

# ============================ –ö–û–ù–°–¢–ê–ù–¢–´ =====================================
readonly SCRIPT_VERSION="4.0.0"
readonly SCRIPT_NAME="$(basename "$0")"
readonly TIMESTAMP="$(date +%Y%m%d_%H%M%S)"
readonly LOG_FILE="/tmp/mediaworks_install_${TIMESTAMP}.log"

# –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
readonly RED='\033[0;31m'; readonly GREEN='\033[0;32m'; readonly YELLOW='\033[1;33m'; readonly BLUE='\033[0;34m'
readonly MAGENTA='\033[0;35m'; readonly CYAN='\033[0;36m'; readonly WHITE='\033[1;37m'; readonly GRAY='\033[0;90m'
readonly NC='\033[0m'; readonly BOLD='\033[1m'

# –≠–º–æ–¥–∑–∏ –∏ –∏–∫–æ–Ω–∫–∏
readonly CHECK_MARK="‚úì"; readonly CROSS_MARK="‚úó"; readonly ARROW="‚ûú"; readonly ROCKET="üöÄ"
readonly PACKAGE="üì¶"; readonly LOCK="üîí"; readonly KEY="üîë"; readonly GEAR="‚öôÔ∏è"; readonly SPARKLES="‚ú®"

# –†–µ–∂–∏–º—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
readonly MODE_FULL="full"; readonly MODE_STANDARD="standard"; readonly MODE_RAG="rag"; readonly MODE_LIGHTWEIGHT="lightweight"

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
readonly DEFAULT_PROJECT_NAME="mediaworks_project"; readonly DEFAULT_DOMAIN="localhost"; readonly DEFAULT_EMAIL="admin@mediaworks.pro"
readonly JWT_EXPIRY_YEARS=20

# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Supabase
readonly SUPABASE_REPO="https://github.com/supabase/supabase.git"

# ============================ –§–£–ù–ö–¶–ò–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ò UI =====================
# (–≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—ã–ª —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ)

log() { echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $*" | tee -a "${LOG_FILE}" >&2; }
error() { echo -e "\n${RED}${CROSS_MARK} –û–®–ò–ë–ö–ê:${NC} $*" | tee -a "${LOG_FILE}" >&2; echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥-—Ñ–∞–π–ª: ${LOG_FILE}${NC}" >&2; exit 1; }
warning() { echo -e "${YELLOW}‚ö† –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:${NC} $*" | tee -a "${LOG_FILE}" >&2; }
info() { echo -e "${BLUE}‚Ñπ –ò–ù–§–û–†–ú–ê–¶–ò–Ø:${NC} $*" >&2; echo "[INFO] $*" >> "${LOG_FILE}"; }
success() { echo -e "${GREEN}${CHECK_MARK}${NC} $*" | tee -a "${LOG_FILE}" >&2; }

show_spinner() {
    local pid=$1; local message=${2:-"–û–±—Ä–∞–±–æ—Ç–∫–∞..."}; local spinner="‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"; local delay=0.1; local i=0
    while kill -0 $pid 2>/dev/null; do
        printf "\r${CYAN}[${spinner:i:1}]${NC} ${message}" >&2; i=$(( (i+1) % ${#spinner} )); sleep $delay
    done
    printf "\r${GREEN}[${CHECK_MARK}]${NC} ${message} ${GREEN}–ì–æ—Ç–æ–≤–æ!${NC}\n" >&2
}

show_media_works_logo() {
    clear
    cat << 'EOF'
    ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
    ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë    ‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${CYAN}    ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${WHITE}                          ENTERPRISE INFRASTRUCTURE AUTOMATION${NC}"
    echo -e "${GRAY}                                   Powered by DevOps Team${NC}"
    echo -e "${CYAN}    ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\n"
}

# ============================ –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–í–ï–†–ö–ò ============================

check_root() { [[ $EUID -ne 0 ]] && error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)"; }

check_system_requirements() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    local checks_passed=true
    if [[ -f /etc/os-release ]]; then
        source /etc/os-release
        [[ ! "$ID" =~ ^(ubuntu|debian)$ ]] && checks_passed=false
    else
        checks_passed=false
    fi
    [[ "$checks_passed" == false ]] && error "–°–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –¢—Ä–µ–±—É–µ—Ç—Å—è Ubuntu 20.04+ –∏–ª–∏ Debian 11+."
    success "–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
}

# ============================ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô =======================

install_dependencies() {
    info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    {
        apt-get update -qq
        apt-get install -y -qq curl wget git jq openssl ca-certificates gnupg lsb-release python3 python3-pip apache2-utils software-properties-common
        pip3 install -q pyjwt cryptography
    } &> /dev/null &
    show_spinner $! "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"
    success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
}

install_docker() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    if command -v docker &> /dev/null && docker compose version &>/dev/null; then
        success "Docker –∏ Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
        return
    fi

    {
        apt-get remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
        mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
        apt-get update -qq
        apt-get install -y -qq docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        systemctl start docker && systemctl enable docker
    } &> /dev/null &
    show_spinner $! "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Engine –∏ Docker Compose"

    if ! command -v docker &> /dev/null || ! docker compose version &> /dev/null; then
        error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –∏–ª–∏ Docker Compose. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥."
    fi
    success "Docker –∏ Docker Compose —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
}

# ============================ –í–´–ë–û–† –†–ï–ñ–ò–ú–ê –£–°–¢–ê–ù–û–í–ö–ò =======================

select_installation_mode() {
    exec < /dev/tty
    echo -e "\n${CYAN}${ROCKET} –í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú –£–°–¢–ê–ù–û–í–ö–ò${NC}\n"
    echo -e "${GREEN}  [1]${NC} ${BOLD}–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô${NC} ${GRAY}(N8N-Cluster, Redis, Supabase-Full)${NC}"
    echo -e "${BLUE}  [2]${NC} ${BOLD}–°–¢–ê–ù–î–ê–†–¢–ù–´–ô${NC} ${GRAY}(N8N, Supabase-Full)${NC}"
    echo -e "${MAGENTA}  [3]${NC} ${BOLD}RAG-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô${NC} ${GRAY}(N8N, Supabase-RAG)${NC}"
    echo -e "${YELLOW}  [4]${NC} ${BOLD}–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô${NC} ${GRAY}(N8N, PostgreSQL)${NC}\n"

    local mode_choice
    while true; do
        read -p "$(echo -e "${CYAN}${ARROW}${NC} –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ ${WHITE}[1-4]${NC}: ")" mode_choice
        case "$mode_choice" in
            1) INSTALLATION_MODE="$MODE_FULL"; break ;;
            2) INSTALLATION_MODE="$MODE_STANDARD"; break ;;
            3) INSTALLATION_MODE="$MODE_RAG"; break ;;
            4) INSTALLATION_MODE="$MODE_LIGHTWEIGHT"; break ;;
            *) echo -e "${RED}${CROSS_MARK} –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.${NC}" ;;
        esac
    done
    success "–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: $INSTALLATION_MODE"
}

# ============================ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–ê =========================

get_project_config() {
    info "–°–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞..."
    exec < /dev/tty
    read -p "$(echo -e "${ARROW} –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ${GRAY}[$DEFAULT_PROJECT_NAME]${NC}: ")" p_name
    PROJECT_NAME=${p_name:-$DEFAULT_PROJECT_NAME}

    read -p "$(echo -e "${ARROW} –î–æ–º–µ–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${GRAY}[$DEFAULT_DOMAIN]${NC}: ")" d_name
    DOMAIN=${d_name:-$DEFAULT_DOMAIN}

    if [[ "$DOMAIN" != "localhost" ]]; then
        read -p "$(echo -e "${ARROW} Email –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ${GRAY}[$DEFAULT_EMAIL]${NC}: ")" e_name
        EMAIL=${e_name:-$DEFAULT_EMAIL}
        USE_SSL="true"
    else
        EMAIL=$DEFAULT_EMAIL
        USE_SSL="false"
        info "SSL –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –¥–æ–º–µ–Ω–∞ localhost."
    fi
    success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
}

# ============================ –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• ============================

generate_password() { tr -dc 'a-zA-Z0-9' < /dev/urandom | head -c "${1:-32}"; }
generate_jwt_secret() { generate_password 64; }

generate_jwt_tokens() {
    local jwt_secret=$1
    cat > /tmp/generate_jwt.py << 'EOF'
import jwt, datetime, sys
def generate_jwt_token(secret, role, expiry_years=20):
    now = datetime.datetime.now(datetime.timezone.utc)
    payload = {"role": role, "iss": "supabase", "iat": int(now.timestamp()), "exp": int((now + datetime.timedelta(days=365 * expiry_years)).timestamp())}
    return jwt.encode(payload, secret, algorithm='HS256')
if __name__ == "__main__":
    print(generate_jwt_token(sys.argv[1], sys.argv[2], int(sys.argv[3])))
EOF
    local anon_key=$(python3 /tmp/generate_jwt.py "$jwt_secret" "anon" "$JWT_EXPIRY_YEARS")
    local service_key=$(python3 /tmp/generate_jwt.py "$jwt_secret" "service_role" "$JWT_EXPIRY_YEARS")
    rm -f /tmp/generate_jwt.py
    echo "$anon_key|$service_key"
}

generate_credentials() {
    info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..." >&2
    local jwt_secret=$(generate_jwt_secret)
    local jwt_tokens=$(generate_jwt_tokens "$jwt_secret")
    # –¢–æ–ª—å–∫–æ —ç—Ç–æ—Ç –≤—ã–≤–æ–¥ –ø–æ–π–¥–µ—Ç –≤ stdout –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    cat << EOF
JWT_SECRET=$jwt_secret
ANON_KEY=$(echo "$jwt_tokens" | cut -d'|' -f1)
SERVICE_ROLE_KEY=$(echo "$jwt_tokens" | cut -d'|' -f2)
POSTGRES_PASSWORD=$(generate_password 32)
DASHBOARD_USERNAME=admin
DASHBOARD_PASSWORD=$(generate_password 24)
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=$(generate_password 24)
REDIS_PASSWORD=$(generate_password 32)
SECRET_KEY_BASE=$(generate_password 64)
VAULT_ENC_KEY=$(generate_password 64)
LOGFLARE_PUBLIC_ACCESS_TOKEN=sb_$(generate_password 32)
LOGFLARE_PRIVATE_ACCESS_TOKEN=lf_$(generate_password 32)
N8N_ENCRYPTION_KEY=$(generate_password 32)
EOF
}

# ======================= –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏ –ö–æ–Ω—Ñ–∏–≥–∏ =======================

create_project_structure() {
    info "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ $1..."
    mkdir -p "$1"/{configs/traefik/dynamic,volumes/{db,n8n,redis,storage,functions},scripts,backups}
    touch "$1"/volumes/traefik/acme.json && chmod 600 "$1"/volumes/traefik/acme.json
    success "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞."
}

clone_supabase() {
    info "–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Supabase..."
    if [[ -d "/root/supabase" ]]; then
        info "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Supabase —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º."
        return
    fi
    git clone --depth 1 "$SUPABASE_REPO" "/root/supabase" &> /dev/null &
    show_spinner $! "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Supabase"
    success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Supabase –≥–æ—Ç–æ–≤."
}

prepare_supabase_files() {
    local project_dir=$1
    local supabase_dir="/root/supabase/docker"
    info "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase..."
    mkdir -p "$project_dir/volumes/db/init-scripts"
    cp "$supabase_dir"/volumes/db/*.sql "$project_dir/volumes/db/"
    cp "$supabase_dir"/volumes/db/init-scripts/*.sql "$project_dir/volumes/db/init-scripts/"
    mkdir -p "$project_dir/configs/supabase"
    cp "$supabase_dir"/kong.yml "$project_dir/configs/supabase/kong.yml"
    cp "$supabase_dir"/volumes/logs/vector.yml "$project_dir/configs/vector.yml"
    cp "$supabase_dir"/volumes/pooler/pooler.exs "$project_dir/configs/pooler.exs"
    success "–§–∞–π–ª—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã."
}

create_env_file() {
    local project_dir=$1 mode=$2 domain=$3 email=$4 use_ssl=$5
    info "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ .env..."
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    eval "$6"

    cat > "$project_dir/.env" << EOF
# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_NAME=$(basename "$project_dir")
DOMAIN=$domain
SITE_URL=https://$domain
API_EXTERNAL_URL=https://$domain
SUPABASE_PUBLIC_URL=https://$domain
STUDIO_DEFAULT_ORGANIZATION=Default
STUDIO_DEFAULT_PROJECT=My_Project

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
POSTGRES_PASSWORD=$POSTGRES_PASSWORD
DASHBOARD_USERNAME=$DASHBOARD_USERNAME
DASHBOARD_PASSWORD=$DASHBOARD_PASSWORD
REDIS_PASSWORD=$REDIS_PASSWORD

# JWT & Keys
JWT_SECRET=$JWT_SECRET
JWT_EXPIRY=315360000
ANON_KEY=$ANON_KEY
SERVICE_ROLE_KEY=$SERVICE_ROLE_KEY
SECRET_KEY_BASE=$SECRET_KEY_BASE
VAULT_ENC_KEY=$VAULT_ENC_KEY

# N8N
N8N_HOST=n8n.$domain
N8N_BASIC_AUTH_ACTIVE=true
N8N_BASIC_AUTH_USER=$N8N_BASIC_AUTH_USER
N8N_BASIC_AUTH_PASSWORD=$N8N_BASIC_AUTH_PASSWORD
N8N_ENCRYPTION_KEY=$N8N_ENCRYPTION_KEY
WEBHOOK_URL=https://$domain/

# Traefik & SSL
EMAIL=$email
USE_SSL=$use_ssl
KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443

# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
POSTGRES_HOST=db
POSTGRES_PORT=5432
POSTGRES_DB=postgres
PGRST_DB_SCHEMAS=public,storage,graphql_public
DOCKER_SOCKET_LOCATION=/var/run/docker.sock
LOGFLARE_PUBLIC_ACCESS_TOKEN=$LOGFLARE_PUBLIC_ACCESS_TOKEN
LOGFLARE_PRIVATE_ACCESS_TOKEN=$LOGFLARE_PRIVATE_ACCESS_TOKEN
FUNCTIONS_VERIFY_JWT=true
POOLER_TENANT_ID=pooler_tenant_1
POOLER_DEFAULT_POOL_SIZE=15
POOLER_MAX_CLIENT_CONN=2000
POOLER_POOL_MODE=transaction
POOLER_DB_POOL_SIZE=25
POOLER_PROXY_PORT_TRANSACTION=6543
EOF

    # –û—á–∏—Å—Ç–∫–∞ .env —Ñ–∞–π–ª–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    sed -i 's/[[:space:]]*$//; s/\r$//' "$project_dir/.env"
    success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω."
}


create_traefik_configuration() {
    local project_dir=$1 email=$2
    info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Traefik..."
    cat > "$project_dir/configs/traefik/traefik.yml" << EOF
api:
  dashboard: true
  debug: false
entryPoints:
  web:
    address: ":80"
    http: { redirections: { entryPoint: { to: "websecure", scheme: "https" } } }
  websecure:
    address: ":443"
providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false
  file:
    directory: /etc/traefik/dynamic
    watch: true
certificatesResolvers:
  letsencrypt:
    acme:
      email: $email
      storage: /letsencrypt/acme.json
      httpChallenge: { entryPoint: "web" }
log: { level: "INFO" }
accessLog: {}
EOF
    # Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    cat > "$project_dir/configs/traefik/dynamic/middlewares.yml" << EOF
http:
  middlewares:
    secure-headers:
      headers:
        frameDeny: true
        sslRedirect: true
        browserXssFilter: true
        contentTypeNosniff: true
    rate-limit:
      rateLimit:
        average: 100
        burst: 50
EOF
    success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Traefik —Å–æ–∑–¥–∞–Ω–∞."
}

create_management_scripts() {
    local project_dir=$1
    info "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
    # manage.sh
    cat > "$project_dir/scripts/manage.sh" << 'EOF'
#!/bin/bash
cd "$(dirname "$0")/.."
CMD=$1; shift
case "$CMD" in
    start|stop|restart|logs|ps) docker compose "$CMD" "$@";;
    update) docker compose pull && docker compose up -d;;
    *) echo "Usage: $0 {start|stop|restart|ps|logs|update}";;
esac
EOF
    # backup.sh
    cat > "$project_dir/scripts/backup.sh" << 'EOF'
#!/bin/bash
cd "$(dirname "$0")/.."
BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"
echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ $BACKUP_DIR..."
docker exec "$(basename `pwd`)_db" pg_dumpall -U postgres > "$BACKUP_DIR/postgres_backup.sql"
tar -czf "$BACKUP_DIR/volumes.tar.gz" volumes/
cp .env docker-compose.yml "$BACKUP_DIR/"
echo "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
EOF
    chmod +x "$project_dir/scripts/"*.sh
    success "–°–∫—Ä–∏–ø—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã."
}

save_credentials() {
    local project_dir=$1 domain=$2 mode=$3
    info "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
    source "$project_dir/.env"
    cat > "$project_dir/credentials.txt" << EOF
==================== MEDIA WORKS: –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï ====================
–ü—Ä–æ–µ–∫—Ç: $PROJECT_NAME | –†–µ–∂–∏–º: $mode | –î–æ–º–µ–Ω: $domain

[ Supabase Studio ]
URL: https://studio.$domain
Service Role Key: $SERVICE_ROLE_KEY
Anon Key: $ANON_KEY

[ N8N Automation ]
URL: https://$N8N_HOST
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $N8N_BASIC_AUTH_USER
–ü–∞—Ä–æ–ª—å: $N8N_BASIC_AUTH_PASSWORD

[ Traefik Dashboard ]
URL: https://traefik.$domain

[ PostgreSQL Database ]
–°—Ç—Ä–æ–∫–∞: postgresql://postgres:$POSTGRES_PASSWORD@$domain:5432/postgres

[ API Endpoints ]
Gateway/REST: https://api.$domain/rest/v1/
Auth: https://api.$domain/auth/v1/
Realtime: wss://api.$domain/realtime/v1/
Storage: https://api.$domain/storage/v1/

[ –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ]
cd $project_dir
./scripts/manage.sh {start|stop|restart|logs|update}

–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –•—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
=====================================================================
EOF
    chmod 600 "$project_dir/credentials.txt"
    success "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $project_dir/credentials.txt"
}

# ======================= –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Docker Compose ========================
# Helper-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–æ–¥ —á–∏—â–µ.
# –ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–≤–æ–π –±–ª–æ–∫ –≤ docker-compose.yml

generate_compose_header() {
    cat > "$1" <<EOF
version: '3.8'

x-common: &common
  restart: unless-stopped
  logging:
    driver: "json-file"
    options: { max-size: "10m", max-file: "3" }
  networks:
    - internal_net

networks:
  internal_net:
    name: ${PROJECT_NAME}_internal_net
  traefik_public:
    external: true
    name: traefik_public

volumes:
  db-data:
  db-config:
  n8n-data:
  redis-data:
  storage-data:
  functions-data:

services:
EOF
}

generate_service_traefik() {
    cat >> "$1" <<EOF
  traefik:
    image: traefik:v3.0
    container_name: \${PROJECT_NAME}_traefik
    command:
      - "--api.dashboard=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traefik_public"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.letsencrypt.acme.email=\${EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports: ["80:80", "443:443"]
    volumes:
      - ./volumes/traefik/acme.json:/letsencrypt/acme.json
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: { traefik_public: {} }
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(\`traefik.\${DOMAIN}\`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=\${DASHBOARD_USERNAME}:\$\$apr1\$\$kcFwV4va\$\$55LAVJj9G3za8R0YDBf1B." # Hashed version of DASHBOARD_PASSWORD
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 3

EOF
}

generate_service_db() {
  local container_name=${2:-"db"}
  cat >> "$1" <<EOF
  $container_name:
    <<: *common
    image: supabase/postgres:15.8.1.060
    container_name: \${PROJECT_NAME}_${container_name}
    volumes:
      - db-data:/var/lib/postgresql/data
      - db-config:/etc/postgresql-custom
      - ./volumes/db/realtime.sql:/docker-entrypoint-initdb.d/99-realtime.sql
      - ./volumes/db/init-scripts/98-webhooks.sql:/docker-entrypoint-initdb.d/98-webhooks.sql
      - ./volumes/db/init-scripts/99-roles.sql:/docker-entrypoint-initdb.d/99-roles.sql
    environment:
      POSTGRES_PASSWORD: \${POSTGRES_PASSWORD}
      POSTGRES_DB: \${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d \${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

EOF
}

generate_service_n8n_single() {
  cat >> "$1" <<EOF
  n8n:
    <<: *common
    image: n8nio/n8n:latest
    container_name: \${PROJECT_NAME}_n8n
    depends_on: { db: { condition: service_healthy } }
    volumes: [ "n8n-data:/home/node/.n8n" ]
    environment:
      - N8N_HOST=\${N8N_HOST}
      - WEBHOOK_URL=\${WEBHOOK_URL}
      - N8N_BASIC_AUTH_ACTIVE=\${N8N_BASIC_AUTH_ACTIVE}
      - N8N_BASIC_AUTH_USER=\${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=\${N8N_BASIC_AUTH_PASSWORD}
      - N8N_ENCRYPTION_KEY=\${N8N_ENCRYPTION_KEY}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_DATABASE=\${POSTGRES_DB}
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=\${POSTGRES_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(\`\${N8N_HOST}\`)"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.network=traefik_public"
    networks:
      - internal_net
      - traefik_public

EOF
}

generate_service_n8n_cluster() {
  cat >> "$1" <<EOF
  redis:
    <<: *common
    image: redis:6.2-alpine
    container_name: \${PROJECT_NAME}_redis
    command: redis-server --save 60 1 --loglevel warning --requirepass \${REDIS_PASSWORD}
    volumes: [ "redis-data:/data" ]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "\${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  n8n-main:
    <<: *common
    image: n8nio/n8n:latest
    container_name: \${PROJECT_NAME}_n8n_main
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    volumes: [ "n8n-data:/home/node/.n8n" ]
    environment:
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=\${REDIS_PASSWORD}
      - N8N_HOST=\${N8N_HOST}
      - WEBHOOK_URL=\${WEBHOOK_URL}
      - N8N_BASIC_AUTH_ACTIVE=\${N8N_BASIC_AUTH_ACTIVE}
      - N8N_BASIC_AUTH_USER=\${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=\${N8N_BASIC_AUTH_PASSWORD}
      - N8N_ENCRYPTION_KEY=\${N8N_ENCRYPTION_KEY}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_DATABASE=\${POSTGRES_DB}
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=\${POSTGRES_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(\`\${N8N_HOST}\`)"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.network=traefik_public"
    networks:
      - internal_net
      - traefik_public

  n8n-worker:
    <<: *common
    image: n8nio/n8n:latest
    container_name: \${PROJECT_NAME}_n8n_worker
    command: worker
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    volumes: [ "n8n-data:/home/node/.n8n" ]
    environment:
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=\${REDIS_PASSWORD}
      - N8N_ENCRYPTION_KEY=\${N8N_ENCRYPTION_KEY}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_DATABASE=\${POSTGRES_DB}
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=\${POSTGRES_PASSWORD}

EOF
}

generate_service_kong() {
  cat >> "$1" <<EOF
  kong:
    <<: *common
    image: kong:2.8.1
    container_name: \${PROJECT_NAME}_kong
    depends_on: { db: { condition: service_healthy } }
    volumes:
      - ./configs/supabase/kong.yml:/home/kong/kong.yml:ro
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl
      SUPABASE_ANON_KEY: \${ANON_KEY}
      SUPABASE_SERVICE_KEY: \${SERVICE_ROLE_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kong-api.rule=Host(\`api.\${DOMAIN}\`)"
      - "traefik.http.routers.kong-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.kong-api.loadbalancer.server.port=8000"
      - "traefik.network=traefik_public"
    networks:
      - internal_net
      - traefik_public
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://kong:8001/status || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

EOF
}

generate_service_studio() {
  cat >> "$1" <<EOF
  studio:
    <<: *common
    image: supabase/studio:2025.06.30-sha-6f5982d
    container_name: \${PROJECT_NAME}_studio
    depends_on: { kong: { condition: service_healthy }, meta: { condition: service_healthy } }
    environment:
      STUDIO_PG_META_URL: http://meta:8080
      POSTGRES_PASSWORD: \${POSTGRES_PASSWORD}
      SUPABASE_URL: http://kong:8000
      SUPABASE_PUBLIC_URL: \${SUPABASE_PUBLIC_URL}
      SUPABASE_ANON_KEY: \${ANON_KEY}
      SUPABASE_SERVICE_KEY: \${SERVICE_ROLE_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.studio.rule=Host(\`studio.\${DOMAIN}\`)"
      - "traefik.http.routers.studio.tls.certresolver=letsencrypt"
      - "traefik.http.services.studio.loadbalancer.server.port=3000"
      - "traefik.network=traefik_public"
    networks:
      - internal_net
      - traefik_public

EOF
}

# ... –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã Supabase ...
# (–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è auth, rest, realtime, storage, meta, functions, analytics, vector, supavisor
# –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –∫–æ–ø–∏—Ä—É—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)

generate_service_auth() {
  cat >> "$1" <<EOF
  auth:
    <<: *common
    image: supabase/gotrue:v2.177.0
    container_name: \${PROJECT_NAME}_auth
    depends_on: { db: { condition: service_healthy } }
    environment:
      API_EXTERNAL_URL: \${API_EXTERNAL_URL}
      GOTRUE_DB_DATABASE_URL: postgresql://supabase_auth_admin:\${POSTGRES_PASSWORD}@db:\${POSTGRES_PORT}/\${POSTGRES_DB}
      GOTRUE_JWT_SECRET: \${JWT_SECRET}
      GOTRUE_JWT_EXP: \${JWT_EXPIRY}
      GOTRUE_SITE_URL: \${SITE_URL}
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9999/health"]
      interval: 10s
      timeout: 5s
      retries: 5

EOF
}

generate_service_rest() {
  cat >> "$1" <<EOF
  rest:
    <<: *common
    image: postgrest/postgrest:v12.2.12
    container_name: \${PROJECT_NAME}_rest
    depends_on: { db: { condition: service_healthy } }
    environment:
      PGRST_DB_URI: postgresql://authenticator:\${POSTGRES_PASSWORD}@db:\${POSTGRES_PORT}/\${POSTGRES_DB}
      PGRST_DB_SCHEMAS: \${PGRST_DB_SCHEMAS}
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: \${JWT_SECRET}
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

EOF
}

generate_service_meta() {
  cat >> "$1" <<EOF
  meta:
    <<: *common
    image: supabase/postgres-meta:v0.91.0
    container_name: \${PROJECT_NAME}_meta
    depends_on: { db: { condition: service_healthy } }
    environment:
      PG_META_DB_HOST: db
      PG_META_DB_PORT: \${POSTGRES_PORT}
      PG_META_DB_NAME: \${POSTGRES_DB}
      PG_META_DB_USER: supabase_admin
      PG_META_DB_PASSWORD: \${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

EOF
}

generate_service_realtime() {
  cat >> "$1" <<EOF
  realtime:
    <<: *common
    image: supabase/realtime:v2.34.47
    container_name: \${PROJECT_NAME}_realtime
    depends_on: { db: { condition: service_healthy } }
    environment:
      DB_HOST: db
      DB_PORT: \${POSTGRES_PORT}
      DB_USER: supabase_admin
      DB_PASSWORD: \${POSTGRES_PASSWORD}
      DB_NAME: \${POSTGRES_DB}
      API_JWT_SECRET: \${JWT_SECRET}
      SECRET_KEY_BASE: \${SECRET_KEY_BASE}
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:4000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

EOF
}

generate_service_storage() {
  cat >> "$1" <<EOF
  storage:
    <<: *common
    image: supabase/storage-api:v1.25.7
    container_name: \${PROJECT_NAME}_storage
    depends_on: { db: { condition: service_healthy }, rest: { condition: service_healthy } }
    volumes: [ "storage-data:/var/lib/storage" ]
    environment:
      ANON_KEY: \${ANON_KEY}
      SERVICE_KEY: \${SERVICE_ROLE_KEY}
      POSTGREST_URL: http://rest:3000
      PGRST_JWT_SECRET: \${JWT_SECRET}
      DATABASE_URL: postgresql://supabase_storage_admin:\${POSTGRES_PASSWORD}@db:\${POSTGRES_PORT}/\${POSTGRES_DB}
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:5000/status || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

EOF
}

generate_service_functions() {
  cat >> "$1" <<EOF
  functions:
    <<: *common
    image: supabase/edge-runtime:v1.67.4
    container_name: \${PROJECT_NAME}_functions
    depends_on: { db: { condition: service_healthy } }
    volumes: [ "functions-data:/home/deno/functions" ]
    environment:
      JWT_SECRET: \${JWT_SECRET}
      SUPABASE_DB_URL: postgresql://postgres:\${POSTGRES_PASSWORD}@db:\${POSTGRES_PORT}/\${POSTGRES_DB}
      VERIFY_JWT: "true"

EOF
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-—Å–±–æ—Ä—â–∏–∫ docker-compose
create_docker_compose_file() {
    local project_dir=$1 mode=$2
    local compose_file="$project_dir/docker-compose.yml"
    info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è docker-compose.yml –¥–ª—è —Ä–µ–∂–∏–º–∞ '$mode'..."

    generate_compose_header "$compose_file"
    generate_service_traefik "$compose_file"

    case "$mode" in
        "$MODE_FULL")
            generate_service_db "$compose_file"
            generate_service_n8n_cluster "$compose_file"
            generate_service_kong "$compose_file"
            generate_service_auth "$compose_file"
            generate_service_rest "$compose_file"
            generate_service_meta "$compose_file"
            generate_service_realtime "$compose_file"
            generate_service_storage "$compose_file"
            generate_service_functions "$compose_file"
            generate_service_studio "$compose_file"
            ;;
        "$MODE_STANDARD")
            generate_service_db "$compose_file"
            generate_service_n8n_single "$compose_file"
            generate_service_kong "$compose_file"
            generate_service_auth "$compose_file"
            generate_service_rest "$compose_file"
            generate_service_meta "$compose_file"
            generate_service_realtime "$compose_file"
            generate_service_storage "$compose_file"
            generate_service_functions "$compose_file"
            generate_service_studio "$compose_file"
            ;;
        "$MODE_RAG")
            generate_service_db "$compose_file"
            generate_service_n8n_single "$compose_file"
            generate_service_kong "$compose_file"
            generate_service_auth "$compose_file"
            generate_service_rest "$compose_file"
            generate_service_meta "$compose_file"
            # –ò—Å–∫–ª—é—á–∞–µ–º storage, functions, realtime
            generate_service_studio "$compose_file"
            ;;
        "$MODE_LIGHTWEIGHT")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ë–î –¥–ª—è n8n –±–µ–∑ Supabase
            generate_service_db "$compose_file" "postgres"
            generate_service_n8n_single "$compose_file"
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å n8n –Ω–∞ postgres
            sed -i 's/depends_on: { db:/depends_on: { postgres:/' "$compose_file"
            sed -i 's/DB_POSTGRESDB_HOST=db/DB_POSTGRESDB_HOST=postgres/' "$compose_file"
            ;;
    esac
    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è Traefik Basic Auth
    DASHBOARD_HASH=$(htpasswd -nb -B admin "$DASHBOARD_PASSWORD" | sed -e 's/\$/\$\$/g')
    sed -i "s|traefik.http.middlewares.auth.basicauth.users=.*|traefik.http.middlewares.auth.basicauth.users=\${DASHBOARD_USERNAME}:${DASHBOARD_HASH}|" "$compose_file"
    success "–§–∞–π–ª docker-compose.yml —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω."
}


# ============================ –ó–ê–ü–£–°–ö –ò –ü–†–û–í–ï–†–ö–ê ============================

start_services() {
    local project_dir=$1
    info "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    cd "$project_dir"
    {
        docker compose up -d 2>&1 | tee -a "${LOG_FILE}"
    } &> /dev/null &
    show_spinner $! "–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    wait $!
    if [[ $? -ne 0 ]]; then
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ 'docker compose logs'."
    fi
    success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."
}

health_check_with_animation() {
    local project_dir=$1 mode=$2
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã)..."
    cd "$project_dir"
    sleep 15 # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é

    local all_ok=true
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º `docker compose ps` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    local services=$(docker compose ps --services)

    for s in $services; do
        printf "  ${ARROW} –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ${BOLD}%-15s${NC} ... " "$s"
        local status=$(docker compose ps -a --format '{{.State}}' "$s")
        if [[ "$status" == "running" || "$status" == "exited" ]]; then # exited is ok for init scripts
             local health=$(docker compose ps -a --format '{{.Health}}' "$s")
             if [[ "$health" == *"healthy"* ]]; then
                echo -e "${GREEN}${CHECK_MARK} –†–∞–±–æ—Ç–∞–µ—Ç (healthy)${NC}"
             elif [[ -z "$health" ]]; then
                echo -e "${GREEN}${CHECK_MARK} –†–∞–±–æ—Ç–∞–µ—Ç (no healthcheck)${NC}"
             else
                echo -e "${YELLOW}‚ö† –†–∞–±–æ—Ç–∞–µ—Ç (unhealthy)${NC}"
                # all_ok=false # –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –ø—Ä–æ—Å—Ç–æ "unhealthy"
             fi
        else
            echo -e "${RED}${CROSS_MARK} –ù–µ –∑–∞–ø—É—â–µ–Ω (status: $status)${NC}"
            all_ok=false
        fi
    done

    echo ""
    if [[ "$all_ok" == true ]]; then
        success "–í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏..."
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        curl -sSf "https://traefik.$DOMAIN" >/dev/null || warning "Dashboard Traefik –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç."
        curl -sSf "https://$N8N_HOST" >/dev/null || warning "N8N –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç."
    else
        error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'docker compose ps' –∏ 'docker compose logs' –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."
    fi
}

# ============================ –§–ò–ù–ê–õ–¨–ù–´–ô –≠–ö–†–ê–ù ==============================

display_final_summary() {
    local project_dir=$1 domain=$2 mode=$3
    clear
    show_media_works_logo
    echo -e "${GREEN}${SPARKLES} –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û! ${SPARKLES}${NC}\n"
    echo -e "    ${CYAN}–†–µ–∂–∏–º:${NC} $mode | ${CYAN}–ü—Ä–æ–µ–∫—Ç:${NC} $(basename $project_dir) | ${CYAN}–î–æ–º–µ–Ω:${NC} $domain\n"
    echo -e "    ${BOLD}–ö–ª—é—á–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤:${NC} ${YELLOW}$project_dir/credentials.txt${NC}"
    echo -e "    ${BOLD}–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã –≤:${NC} ${YELLOW}$project_dir/scripts/${NC}\n"
    echo -e "    ${GREEN}‚ûú N8N URL:${NC} https://$N8N_HOST"
    [[ "$mode" != "$MODE_LIGHTWEIGHT" ]] && echo -e "    ${GREEN}‚ûú Supabase Studio URL:${NC} https://studio.$domain"
    echo -e "    ${GREEN}‚ûú Traefik Dashboard URL:${NC} https://traefik.$domain\n"
    echo -e "    ${BOLD}–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞!${NC}"
}

# ============================ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==============================

main() {
    # UI –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    show_media_works_logo && sleep 2
    check_root
    check_system_requirements
    install_dependencies
    install_docker

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    select_installation_mode
    get_project_config
    local project_dir="/root/$PROJECT_NAME"

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
    if [[ "$INSTALLATION_MODE" != "$MODE_LIGHTWEIGHT" ]]; then
        clone_supabase
        prepare_supabase_files "$project_dir"
    fi
    create_project_structure "$project_dir"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    local credentials=$(generate_credentials)
    create_env_file "$project_dir" "$INSTALLATION_MODE" "$DOMAIN" "$EMAIL" "$USE_SSL" "$credentials"
    create_traefik_configuration "$project_dir" "$EMAIL"
    create_docker_compose_file "$project_dir" "$INSTALLATION_MODE"

    # –ó–∞–ø—É—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
    start_services "$project_dir"
    health_check_with_animation "$project_dir" "$INSTALLATION_MODE"

    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —à–∞–≥–∏
    create_management_scripts "$project_dir"
    save_credentials "$project_dir" "$DOMAIN" "$INSTALLATION_MODE"
    display_final_summary "$project_dir" "$DOMAIN" "$INSTALLATION_MODE"
}

# ============================ –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê ================================
main "$@"
